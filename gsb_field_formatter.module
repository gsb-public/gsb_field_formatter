<?php

/**
 * @file
 * Provides field formatters for the GSB.
 */

/**
 * Implements hook_field_formatter_info().
 */
function gsb_field_formatter_field_formatter_info() {
  return array(
    'gsb_field_formatter_email_default' => array(
      'label' => t('GSB Default email link'),
      'description' => t('Display Email as a mailto link.'),
      'field types' => array('email'),
    ),
    'gsb_field_formatter_download_link' => array(
      'label' => t('GSB Download Link'),
      'field types' => array('file'),
      'settings' => array(
        'file_view_mode' => 'default',
        'text' => t('Download'),
      ),
    ),
    'gsb_field_formatter_video_lightbox' => array(
      'label' => t('GSB Image/Video lightbox'),
      'field types' => array('video_embed_field'),
      'settings' => array(
        'file_view_mode' => 'default',
        'image_style' => '',
      ),
    ),
    'gsb_field_formatter_image_or_video_popup' => array(
      'label' => t('GSB Image/Video popup'),
      'field types' => array('file'),
      'settings' => array(
        'file_view_mode' => 'default',
      ),
    ),
    'gsb_field_formatter_resources_video_image_popup' => array(
      'label' => t('Resources Video Image Popup'),
      'field types' => array('file'),
      'settings' => array(
        'image_style' => '',
      ),
    ),
    'gsb_field_formatter_field_collection_separator' => array(
      'label' => t('Fields with a separator'),
      'field types' => array('field_collection'),
      'settings' =>  array(
        'view_mode' => 'full',
        'separator' => ', ',
      ),
    ),
    'gsb_field_formatter_address_custom' => array(
      'label' => t('Full Address (custom)'),
      'field types' => array('addressfield'),
      'settings' =>  array(
        'display_address_line1' => TRUE,
        'display_address_line2' => TRUE,
        'display_city' => TRUE,
        'display_state' => TRUE,
        'display_post_code' => TRUE,
        'display_country' => TRUE,
        'hide_usa_country' => TRUE,
      ),
    ),
    'gsb_field_formatter_twitter_handle' => array(
      'label' => t('Twitter Handle as a Link'),
      'field types' => array('text'),
      'settings' => array(
        'text' => t('Twitter'),
        'view_mode' => t(''),
      ),
    ),
    'gsb_field_formatter_spotlight_fid_to_image' => array(
      'label' => t('Spotlight FID to Image'),
      'field types' => array('text', 'number_integer'),
    ),
    'gsb_field_formatter_address_city_state' => array(
      'label' => t('City, State'),
      'field types' => array('addressfield'),
    ),
    'gsb_field_formatter_address_no_country' => array(
      'label' => t('Full Address (no country)'),
      'field types' => array('addressfield'),
    ),
    'gsb_field_formatter_node_title_link' => array(
      'label' => t('Node title link'),
      'field types' => array('link_field'),
    ),
    'gsb_field_formatter_featured_content_featured_item_link' => array(
      'label' => t('Featured item link'),
      'field types' => array('link_field'),
    ),
    'gsb_field_formatter_path_term_separator' => array(
      'label' => t('Separated tags with custom path'),
      'field types' => array('taxonomy_term_reference'),
      'settings' =>  array(
        'separator' => ', ',
        'tid_or_name' => 'tid',
        'path_prefix' => 'taxonomy/term/',
        'limit_depth' => FALSE,
        'link_to_term' => TRUE,
      ),
    ),
    'gsb_field_formatter_image' => array(
      'label' => t('GSB Image'),
      'description' => t('Display the image in a specific view mode'),
      'field types' => array('image'),
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),
    'gsb_field_formatter_document' => array(
      'label' => t('GSB Document'),
      'description' => t('Display the document as a link with field_title as title'),
      'field types' => array('file'),
    ),
    'gsb_field_formatter_month' => array(
      'label' => t('Convert to Month'),
      'description' => t('Turn an integer field into a date value.'),
      'field types' => array('number_integer'),
    ),
    'gsb_field_formatter_related_items_field_collection' => array(
      'label' => t('Related items field collection'),
      'field types' => array('field_collection'),
      'settings' =>  array(
        'view_mode' => 'full',
      ),
    ),
    'gsb_field_formatter_split_date_format' => array(
      'label' => t('Custom date format to split date and time'),
      'description' => t('Date format to have date and time on two lines'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'gsb_field_formatter_time_zone_abbreviated' => array(
      'label' => t('Timezone abbreviated'),
      'description' => t('Date format to have date and time on two lines'),
      'field types' => array('tzfield'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gsb_field_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $base_url;
  // Track the top level terms for vocabularies if needed.
  static $top_level_terms = array();

  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'gsb_field_formatter_email_default':
      foreach ($items as $delta => $item) {
        $output = l('Email', 'mailto:' . $item['email']);
        $element[$delta] = array('#markup' => $output);
      }
      break;
    case 'gsb_field_formatter_address_custom':
      $output = '';
      foreach ($items as $delta => $item) {
        $address = array();
        // Address line 1.
        if ($display['settings']['display_address_line1']) {
          if (!empty($item['thoroughfare'])) {
            $output .= '<div class="address-line-1"><span class="address-thoroughfare">' . $item['thoroughfare'] . '</span></div>';
          }
        }
        // Address line 2.
        if ($display['settings']['display_address_line2']) {
          if (!empty($item['premise'])) {
            $output .= '<div class="address-line-2"><span class="address-premise">' . $item['premise'] . '</span></div>';
          }
        }
        // City.
        if ($display['settings']['display_city']) {
          if (!empty($item['locality'])) {
            $address[] = $item['locality'];
          }
        }
        // State
        if ($display['settings']['display_state']) {
          if (!empty($item['administrative_area'])) {
            module_load_include('inc', 'addressfield', 'addressfield.administrative_areas');
            if ($item['country'] == 'US') {
              $address[] = $item['administrative_area'];
            }
            else {
              $administrative_areas = addressfield_get_administrative_areas($item['country']);
              $address[] = $administrative_areas != null && isset($administrative_areas[$item['administrative_area']]) ? $administrative_areas[$item['administrative_area']] : $item['administrative_area'];
            }
          }
        }
        // Post Code
        if ($display['settings']['display_post_code']) {
          if (!empty($item['postal_code'])) {
            $address[] = $item['postal_code'];
          }
        }
        // Country
        if ($display['settings']['display_country']) {
          $countries = _addressfield_country_options_list();
          if (!empty($item['country']) && isset($countries[$item['country']])) {
            if ($item['country'] == 'US' && !$display['settings']['hide_usa_country'] || $item['country'] != 'US') {
              $address[] = $countries[$item['country']];
            }
          }
        }
        if (!empty($address)) {
          $output .= '<div class="address-line-3">' . implode(', ', $address) . '</div>';
        }
        $element[$delta]['#markup'] = $output;
      }
      break;
    case 'gsb_field_formatter_download_link':
      if (!empty($items[0])) {
        $file = $items[0];

        // Support token replacement.
        $file['description'] = token_replace($display['settings']['text'], array($entity_type => $entity), array('clear' => 1, 'sanitize' => 0));
        $element[] = array(
          '#theme' => 'file_link',
          '#file' => (object) $file,
        );
      }
      break;
    case 'gsb_field_formatter_video_lightbox':
      // Renders YouTube thumbnail image, and a video player in a lightbox
      foreach ($items as $delta => $item) {
        // Wrap the image in a link to trigger fancybox.
        $uri = resources_resource_youtube_parse($item['video_url']);
        $stream_wrapper = new ResourcesYouTubeStreamWrapper();
        $stream_wrapper->setUri($uri);
        $video_parts = drupal_parse_url($item['video_url']);
        $query_v = !empty($video_parts['query']['v']) ? $video_parts['query']['v'] : '';
        $embed = str_replace('watch?v=', 'embed/', $stream_wrapper->interpolateUrl());
        $protocol = file_uri_scheme($embed);
        $server_scheme = 'http';
        if (isset($GLOBALS['_SERVER']['HTTPS']) && $GLOBALS['_SERVER']['HTTPS'] == 'on') {
          $server_scheme = 'https';
        }
        if ($protocol != $server_scheme) {
          if (stristr($protocol,'https')) {
            $embed = str_replace('https://', 'http://', $embed);
          }
          else if (stristr($protocol,'http')) {
            $embed = str_replace('http://', 'https://', $embed);
          }
        }
        $rendered_video = array(
          '#type' => 'link',
          '#title' => '',
          '#href' => $embed,
          '#options' => array(
            'html' => TRUE,
            'query' => array(
              'autoplay' => 1,
              'v' => $query_v,
            ),
            'attributes' => array(
              'class' => array(
                'fancybox',
                'fancybox.iframe',
                'gsb-video-preview',
              ),
            ),
          ),
        );
        // Get the youtube embed code.

        if ($stream_wrapper) {
          // Build the thumbnail.
          $thumbnail = array(
            'style_name' => $display['settings']['image_style'],
            'path' => $stream_wrapper->getLocalThumbnailPath($uri),
            'alt' => '',
            'title' => '',
            'width' => '',
            'height' => '',
          );
          // Wrap the image in a link to trigger fancybox.
          $start = 0;
          if (!empty($video_parts['query']['t'])) {
            $start = trim($video_parts['query']['t'],'s');
            if (strpos($start, 'm')) {
              $start = explode('m', $start);
              $start = $start[0] * 60 + $start[1];
            }
          }
          $rendered_thumbnail = array(
            '#type' => 'link',
            '#title' => theme_image_style($thumbnail),
            '#href' => $embed,
            '#options' => array(
              'html' => TRUE,
              'query' => array(
                'autoplay' => 1,
              ),
              'attributes' => array(
                'class' => array(
                  'fancybox',
                  'fancybox.iframe',
                  'gsb-video-preview',
                ),
                'data-fancybox-settings' => '{ "youtube": { "autoplay": 1, "start": ' . $start . '} }',
              ),
            ),
          );
        }
        if ($rendered_thumbnail) {
          $element[$delta] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array(
                'gsb-image-video-popup',
              ),
            ),
          );
          $element[$delta]['thumbnail'] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array(
                'gsb-image-video-popup-thumbnail',
              ),
            ),
            'item' => $rendered_thumbnail,
          );
        }
      }
      break;
    case 'gsb_field_formatter_image_or_video_popup':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      if ($_GET['q'] == 'home') {
        $display['settings']['file_view_mode'] = 'gsb_slideshow_small';
      }
      foreach ($items as $delta => $item) {
        $render_element = null;
        if ($item['type'] == 'image') {
          $render_element = file_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, array($item), $display);
        }
        elseif ($item['type'] == 'video') {
          $render_element = file_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, array($item), $display);

          // Transform the stream wrapper into a path.
          $path = drupal_realpath($item['uri']);

          // switch to https if needed
          $pos = strpos($base_url, 'https');
          if ($pos !== false) {
            $path = str_replace('http://', 'https://', $path);
          }

          // Handle Youbute videos.
          if ($item['filemime'] == 'video/youtube') {
            // Parse the URL into parts, in order to make it an embed URL.
            $video_parts = drupal_parse_url($path);
            $embed = str_replace('watch', 'embed', $video_parts['path']) . '/' . $video_parts['query']['v'];
          }
          // Handle Vimeo videos.
          elseif ($item['filemime'] == 'video/vimeo') {
            $vparts = explode('/', $path);
            $video_id = end($vparts);
            $embed = 'https://player.vimeo.com/video/';
            // switch to https if needed
            $pos = strpos($base_url, 'https');
            if ($pos !== false) {
              $embed = str_replace('http://', 'https://', $embed);
            }
            $embed .= $video_id;
          }
          // Wrap the image in a link to trigger fancybox.
          $render_element = array(
            '#type' => 'link',
            '#title' => drupal_render($render_element[$delta]['file']),
            '#href' => $embed,
            '#options' => array(
              'html' => TRUE,
              'query' => array(
                'autoplay' => 1,
              ),
              'attributes' => array(
                'class' => array(
                  'fancybox',
                  'fancybox.iframe',
                  'gsb-video-preview',
                ),
              ),
            ),
          );
        }
        //Handle diptych right image
       if ($entity->bundle == 'diptych' && $entity->field_file_single_public['und'][0]['filemime'] != 'video/youtube') {
         $render_element = file_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, array($item), $display);
         $target = false;
         if (sizeof($entity->field_diptych_right_cta_link['und'][0]['attributes']) != 0) {
          $target = $entity->field_diptych_right_cta_link['und'][0]['attributes']['target']['checked'];
         }
         $render_element = array(
           '#type' => 'link',
           '#title' => drupal_render($render_element[$delta]['file']),
           '#href' => $entity->field_diptych_right_cta_link['und'][0]['url'],
           '#options' => array(
             'html' => TRUE,
             'attributes' => ($target) ? array(
             'target' => '_blank',
             ) : array(),
           ),
         );
       }
        if ($render_element) {
          $element[$delta] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array(
                'gsb-image-video-popup',
              ),
            ),
            'item' => $render_element,
          );
        }
      }
      break;
    case 'gsb_field_formatter_resources_video_image_popup':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';

      foreach ($items as $delta => $item) {
        $render_element = NULL;
        $stream_wrapper = NULL;
        if ($item['type'] == 'resource_youtube') {
          // Get the youtube embed code.
          $stream_wrapper = new ResourcesYouTubeStreamWrapper();
        }

        if ($stream_wrapper) {
          $stream_wrapper->setUri($item['uri']);
          $href = $stream_wrapper->interpolateUrl();
          $video_parts = drupal_parse_url($href);
          $embed = str_replace('watch', 'embed', $video_parts['path']) . '/' . $video_parts['query']['v'];

          // Build the thumbnail.
          $thumbnail = array(
            'style_name' => $display['settings']['image_style'],
            'path' => $stream_wrapper->getLocalThumbnailPath($item['uri']),
            'alt' => $item['alt'],
            'title' => $item['title'],
            'width' => '',
            'height' => '',
          );

          // Wrap the image in a link to trigger fancybox.
          $rendered_thumbnail = array(
            '#type' => 'link',
            '#title' => theme_image_style($thumbnail),
            '#href' => $embed,
            '#options' => array(
              'html' => TRUE,
              'query' => array(
                'autoplay' => 1,
              ),
              'attributes' => array(
                'class' => array(
                  'fancybox',
                  'fancybox.iframe',
                  'gsb-video-preview',
                ),
              ),
            ),
          );
        }
        if ($rendered_thumbnail) {
          $element[$delta] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array(
                'gsb-image-video-popup',
              ),
            ),
          );

          $rendered_video = file_view((object) $item, '1_2_width');
          $element[$delta]['video'] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array(
                'gsb-image-video-popup-video',
              ),
            ),
            'item' => $rendered_video,
          );

          $element[$delta]['thumbnail'] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array(
                'gsb-image-video-popup-thumbnail',
              ),
            ),
            'item' => $rendered_thumbnail,
          );
        }
      }
      break;
    case 'gsb_field_formatter_field_collection_separator':
      $view_mode = !empty($settings['view_mode']) ? $settings['view_mode'] : 'full';
      $count = count($items);
      foreach ($items as $delta => $item) {
        if (($field_collection = field_collection_field_get_entity($item)) && entity_access('view', 'field_collection_item', $field_collection)) {
          $element[$delta]['entity'] = $field_collection->view($view_mode);
          if ($delta != $count - 1) {
            $element[$delta]['#suffix'] = '<span class="separator">' . check_plain($display['settings']['separator']) . '</span>';
          }
        }
      }
      if (!empty($element)) {
        $element['#type'] = 'container';
        $element['#attributes'] = array(
          'class' => array(
            'gsb_field_formatter_field_collection_separator',
          ),
        );
      }
      break;

    case 'gsb_field_formatter_twitter_handle':
      if (!empty($entity->field_has_twitter_handle['und'][0]) && !empty($entity->field_has_twitter_handle['und'][0]['value'] == '1')) {
        foreach ($items as $delta => $item) {
          $view_mode = '';
          if (!empty($settings['view_mode'])) {
            $view_mode = $settings['view_mode'];
          }
          if ($view_mode == 'people_fpp') {
            $element[$delta]['#markup'] = '<a href="https://twitter.com/@' . $item['value'] . '" class="twitter-handle-text" target="_blank">' . '@' . $item['value'] . '</a>';
          }
          else {
            $element[$delta]['#markup'] = '<a href="https://twitter.com/@' . $item['value'] . '" target="_blank">' . $settings['text'] . '</a>';
          }
        }
      }
      break;

    case 'gsb_field_formatter_spotlight_fid_to_image':
      foreach ($items as $delta => $item) {
        if ($file = file_load($item['value'])) {
          $element[$delta] = array(
            '#theme' => 'image_formatter',
            '#item' => array(
              'uri' => $file->uri,
            ),
            '#image_style' => '270x158',
          );
        }
      }
      break;

    case 'gsb_field_formatter_address_city_state':
      $countries = _addressfield_country_options_list();
      foreach ($items as $delta => $item) {
        $address = array();
        // City.
        if (!empty($item['locality'])) {
          $address[] = $item['locality'];
        }
        // State.
        if (!empty($item['administrative_area'])) {
          $address[] = $item['administrative_area'];
        }
        if (!empty($item['country']) && $item['country'] != 'US' && isset($countries[$item['country']])) {
          $address[] = $countries[$item['country']];
        }
        $address = implode(', ', $address);
        $element[$delta]['#markup'] = $address;
      }
      break;

    case 'gsb_field_formatter_address_no_country':
      $countries = _addressfield_country_options_list();
      foreach ($items as $delta => $item) {
        // Address line 1.
        if (!empty($item['thoroughfare'])) {
          $address['first_line'] = $item['thoroughfare'];
        }
        // Address line 2.
        if (!empty($item['premise'])) {
          $address['second_line'] = $item['premise'];
        }
        // City, State Zip
        $address['third_line'] = '';
        if (!empty($item['locality'])) {
          // City.
          $address['third_line'] .= $item['locality'];
          // If there is either a city or zip, add a comma.
          if (!empty($item['administrative_area']) || !empty($item['postal_code'])) {
            $address['third_line'] .= ',';
          }
        }
        // State.
        if (!empty($item['administrative_area'])) {
          $address['third_line'] .= ' ' . $item['administrative_area'];
        }
        // Zip.
        if (!empty($item['postal_code'])) {
          $address['third_line'] .= ' ' . $item['postal_code'];
        }
        if (!empty($item['country']) && $item['country'] != 'US' && isset($countries[$item['country']])) {
          $address['fourth_line'] = $countries[$item['country']];
        }
        // Combine all of the lines.
        $element[$delta]['#markup'] = implode('<br>', array_filter($address));
      }
      break;

    case 'gsb_field_formatter_node_title_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#prefix' => '<h2>',
          '#suffix' => '</h2>',
          '#type' => 'link',
          '#href' => $item['url'],
          '#title' => $entity->title,
          '#options' => array(
            'attributes' => array(
              'target' => '_blank',
            ),
            'query' => $item['query'],
            'fragment' => $item['fragment'],
          ),
        );
      }
      break;

    case 'gsb_field_formatter_featured_content_featured_item_link':
      foreach ($items as $delta => $item) {
        $attributes = array();
        if (!empty($item['attributes']['target'])) {
          $attributes['target'] = $item['attributes']['target'];
        }
        $url = $item['url'];
        if (!empty($item['query'])) {
          $url .= '?';
          $index = 0;
          foreach($item['query'] as $key => $value) {
            $url .= $index > 0 ? '&' : '';
            $url .= $key . '=' . $value;
            $index++;
          }
        }
        $element[$delta] = array(
          '#prefix' => '<h2>',
          '#suffix' => '</h2>',
          '#type' => 'link',
          '#href' => $url,
          '#title' => $entity->field_title[$langcode][0]['value'],
          '#options' => array('attributes' => $attributes),
        );
      }
      break;

    case 'gsb_field_formatter_path_term_separator':
      $count = count($items);
      foreach ($items as $delta => $item) {
        $term = $item['taxonomy_term'];
        // Check if the depth needs to be limited.
        if ($settings['limit_depth']) {
          // If this vocabulary has not been seen before, load the top level of
          // terms, and build an array with the tids as the keys and values.
          if (!isset($top_level_terms[$term->vid])) {
            $top_level_terms[$term->vid] = drupal_map_assoc(array_map(function ($term) {
              return $term->tid;
            }, taxonomy_get_tree($term->vid, 0, 1)));
          }
          // If this term is not in the top level, decrement the count and skip.
          if (!isset($top_level_terms[$term->vid][$term->tid])) {
            $count--;
            continue;
          }
        }
        if (!$settings['link_to_term']) {
          $element[$delta]['#markup'] = check_plain($term->name);
        } else {
          module_load_include('inc', 'pathauto');
          $path = $settings['path_prefix'] . pathauto_cleanstring($term->{$settings['tid_or_name']});
          $element[$delta]['#markup'] = '<a href="' . base_path() . $path . '">' . check_plain($term->name) . '</a>';
        }
        if ($delta != $count - 1) {
          $element[$delta]['#suffix'] = '<span class="separator">' . check_plain($settings['separator']) . '</span>';
        }
      }
      break;
    case 'gsb_field_formatter_image':
      // Check if the formatter involves a link.
      if ($display['settings']['image_link'] == 'content') {
        $uri = entity_uri($entity_type, $entity);
      }
      elseif ($display['settings']['image_link'] == 'file') {
        $link_file = TRUE;
      }

      foreach ($items as $delta => $item) {
        if (isset($link_file)) {
          $uri = array(
            'path' => file_create_url($item['uri']),
            'options' => array(),
          );
        }
        $replace_options = array(
          'clear' => 1,
          'sanitize' => 0,
        );

        $display['settings']['alt'] = '[file:field_file_image_alt_text]';
        $display['settings']['title'] = '[file:field_file_image_title_text]';
        $file = file_load($item['fid']);
        $item['title'] = token_replace($display['settings']['title'], array('file' => $file), $replace_options);
        $item['alt'] = token_replace($display['settings']['alt'], array('file' => $file), $replace_options);

        $element[$delta] = array(
          '#theme' => 'image_formatter',
          '#item' => $item,
          '#image_style' => $display['settings']['image_style'],
          '#path' => isset($uri) ? $uri : '',
        );
      }
      break;
    case 'gsb_field_formatter_document':
      foreach ($items as $delta => $item) {
        $file = file_load($item['fid']);
        if ($file->type == 'document') {
          $entity_wrapper = entity_metadata_wrapper("file", $file->fid);
          $title = $entity_wrapper->field_title->value();
          if ($title) {
            $file->filename = $title;
          }
          $element[$delta] = array(
            '#theme' => 'file_link',
            '#file' => $file,
          );
        }
      }
      break;
    case 'gsb_field_formatter_month':
      foreach ($items as $delta => $item) {
        $month = $item['value'];
        if ($month < 1) {
          $month = 1;
        }
        else if ($month > 12) {
          $month = 12;
        }

        $adjusted_date = mktime(0, 0, 0, $month, 10);

        $element[$delta] = array(
          '#markup' => date('F', $adjusted_date),
        );
      }
      break;

    case 'gsb_field_formatter_related_items_field_collection':
      $view_mode = !empty($display['settings']['view_mode']) ? $display['settings']['view_mode'] : 'full';
      foreach ($items as $delta => $item) {
        if ($field_collection = field_collection_field_get_entity($item)) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $field_collection);
          if ($wrapper->field_related_other_content->value()) {
            $node = $wrapper->field_related_other_content->value();
            if (node_access('view', $node)) {
              $element[$delta]['entity'] = $field_collection->view($view_mode);
              if (!$node->status) {
                $element[$delta]['entity']['#type'] = 'container';
                $element[$delta]['entity']['#attributes']['class'] = array('node-unpublished');
              }
            }
          }
        }
      }
      break;

    case 'gsb_field_formatter_split_date_format':
      foreach ($items as $delta => $item) {
        $local_date = date_formatter_process($instance['display']['default']['type'], $entity_type, $entity, $field, $instance, LANGUAGE_NONE, $item, $instance['display']['default']);
        $all_day = date_all_day_field($field, $instance, $local_date['value']['local']['object'], $local_date['value2']['local']['object']);

        $db_format = date_type_format($field['type']);
        $date = new DateObject($item['value'], $item['timezone_db'], $db_format);
        $timezone = isset($item['timezone']) ? $item['timezone'] : '';
        $timezone = timezone_open(date_get_timezone($field['settings']['tz_handling'], $timezone));
        date_timezone_set($date, $timezone);

        $month_day_year = date_format_date($date, 'custom', 'l, M j, Y');
        $time = date_format_date($date, 'custom', 'g:ia');

        if (isset($item['value2'])) {
          $date2 = new DateObject($item['value2'], $item['timezone_db'], $db_format);
          date_timezone_set($date2, $timezone);
          if (date_format_date($date, 'custom', 'Y-m-d') == date_format_date($date2, 'custom', 'Y-m-d')) {
            // Same date with a time range
            $time2 = date_format_date($date2, 'custom', 'i') !== '00' ? date_format_date($date2, 'custom', 'g:ia') : date_format_date($date2, 'custom', 'g:ia');
            if ($time2 != $time) {
              $time .= ' – ' . $time2;
            }
            $time_output = $all_day ? '' : '<div class="time">' . $time . '</div>';
            $output = '<div class="split-date-time"><div class="date">' . $month_day_year . '</div>' . $time_output . '</div>';
          }
          else {
            // Range of dates
            $time2 = date_format_date($date2, 'custom', 'i') !== '00' ? date_format_date($date2, 'custom', 'g:ia') : date_format_date($date2, 'custom', 'g:ia');
            $month_day_year2 = date_format_date($date2, 'custom', 'l, M j, Y');
            $time_output = $all_day ? '' : '<div class="time">' . $time . ' – ' . $time2 . '</div>';
            $output = '<div class="split-date-time"><div class="date">' . $month_day_year . ' – ' . $month_day_year2 . '</div>' . $time_output . '</div>';

          }
        }

        else {
          $output = '<div class="split-date-time"><div class="date">' . $month_day_year . '</div><div class="time">' . $time . '</div></div>';
        }
        $element[$delta] = array(
          '#markup' => $output,
        );
      }
      break;
    case 'gsb_field_formatter_time_zone_abbreviated':
      foreach ($items as $delta => $item) {
        $dateTime = new DateTime();
        $dateTime->setTimeZone(new DateTimeZone($item['value']));
        $output = $dateTime->format('T');
        $element[$delta] = array(
          '#markup' => $output,
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function gsb_field_formatter_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $taxonomy_entities = array();
  foreach ($entities as $entity_id => $entity) {
    if ($displays[$entity_id]['type'] == 'gsb_field_formatter_path_term_separator') {
      $taxonomy_entities[$entity_id] = $entity;
    }
  }
  if (!empty($taxonomy_entities)) {
    taxonomy_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
  }
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function gsb_field_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();

  $display = &$instance['display'][$view_mode];
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'gsb_field_formatter_twitter_handle':
      $element['text'] = array(
        '#type' => 'textfield',
        '#title' => t('Link text'),
        '#default_value' => $settings['text'],
        '#required' => TRUE,
      );
      $element['view_mode'] = array(
        '#type' => 'textfield',
        '#title' => t('View Mode'),
        '#default_value' => $settings['view_mode'],
        '#required' => FALSE,
      );
      break;
    case 'gsb_field_formatter_download_link':
      $element['text'] = array(
        '#type' => 'textfield',
        '#title' => t('Link text'),
        '#default_value' => $settings['text'],
        '#required' => TRUE,
      );
      // Display token list.
      if (module_exists('token')) {
        $element['token_tree'] = array(
          '#theme' => 'token_tree',
          '#dialog' => TRUE,
          '#token_types' => 'all',
        );
      }
      break;
    case 'gsb_field_formatter_video_lightbox':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $image_styles = image_style_options(FALSE);
      $element['image_style'] = array(
        '#title' => t('Image style of the thumbnail'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );
      break;
    case 'gsb_field_formatter_image_or_video_popup':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $element = file_entity_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      break;
    case 'gsb_field_formatter_resources_video_image_popup':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $image_styles = image_style_options(FALSE);
      $element['image_style'] = array(
        '#title' => t('Image style of the thumbnail'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );
      break;
    case 'gsb_field_formatter_field_collection_separator':
      $entity_type = entity_get_info('field_collection_item');
      $options = array();
      foreach ($entity_type['view modes'] as $mode => $info) {
        $options[$mode] = $info['label'];
      }

      $element['view_mode'] = array(
        '#type' => 'select',
        '#title' => t('View mode'),
        '#options' => $options,
        '#default_value' => $settings['view_mode'],
        '#description' => t('Select the view mode'),
      );

      $element['separator'] = array(
        '#type' => 'textfield',
        '#title' => t('Separator'),
        '#default_value' => $settings['separator'],
        '#description' => t('Choose a separator, include any spaces'),
      );
      break;

    case 'gsb_field_formatter_path_term_separator':
      $element['link_to_term'] = array(
        '#type' => 'checkbox',
        '#title' => t('Link to term'),
        '#default_value' => $settings['link_to_term'],
      );
      $element['path_prefix'] = array(
        '#type' => 'textfield',
        '#title' => t('Path prefix'),
        '#default_value' => $settings['path_prefix'],
        '#description' => t('The prefix for the path, defaults to taxonomy/term/'),
      );
      $element['tid_or_name'] = array(
        '#type' => 'radios',
        '#title' => t('Term ID or Term name'),
        '#options' => array(
          'tid' => t('Term ID'),
          'name' => t('Term name'),
        ),
        '#default_value' => $settings['tid_or_name'],
        '#description' => t('Which value should be appended to the path prefix'),
      );
      $element['separator'] = array(
        '#type' => 'textfield',
        '#title' => t('Separator'),
        '#default_value' => $settings['separator'],
        '#description' => t('Choose a separator, include any spaces'),
      );
      $element['limit_depth'] = array(
        '#type' => 'checkbox',
        '#title' => t('Limit depth to first level'),
        '#default_value' => $settings['limit_depth'],
        '#description' => t('Whether the depth should be limited to the first level'),
      );
      break;
    case 'gsb_field_formatter_image':
      $image_styles = image_style_options(FALSE);
      $element['image_style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );

      $link_types = array(
        'content' => t('Content'),
        'file' => t('File'),
      );
      $element['image_link'] = array(
        '#title' => t('Link image to'),
        '#type' => 'select',
        '#default_value' => $settings['image_link'],
        '#empty_option' => t('Nothing'),
        '#options' => $link_types,
      );
      break;

    case 'gsb_field_formatter_related_items_field_collection':
      // Inherit form from field_collection_fields formatter.
      $instance['display'][$view_mode]['type'] = 'field_collection_fields';
      $element = field_collection_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      break;

    case 'gsb_field_formatter_address_custom':
      $element['display_address_line1'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display Street Address Line 1'),
        '#default_value' => $settings['display_address_line1'],
      );
      $element['display_address_line2'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display Street Address Line 2'),
        '#default_value' => $settings['display_address_line2'],
      );
      $element['display_city'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display City'),
        '#default_value' => $settings['display_city'],
      );
      $element['display_state'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display State'),
        '#default_value' => $settings['display_state'],
      );
      $element['display_post_code'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display Post Code'),
        '#default_value' => $settings['display_post_code'],
      );
      $element['display_country'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display Country'),
        '#default_value' => $settings['display_country'],
      );
      $element['hide_usa_country'] = array(
        '#type' => 'checkbox',
        '#title' => t('Hide USA Country'),
        '#default_value' => $settings['hide_usa_country'],
      );
      break;

  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gsb_field_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = '';

  $display = &$instance['display'][$view_mode];
  $settings = $display['settings'];
  switch ($display['type']) {

    case 'gsb_field_formatter_twitter_handle':
      $view_mode = empty($settings['view_mode']) ? '' : $settings['view_mode'];
      $summary = 'Link text: ' . $settings['text'] . ' View Mode: ' . $view_mode;
      break;

    case 'gsb_field_formatter_download_link':
      $summary = 'Link text: ' . $settings['text'];
      break;

    case 'gsb_field_formatter_image_or_video_popup':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $summary = file_entity_field_formatter_settings_summary($field, $instance, $view_mode);
      break;

    case 'gsb_field_formatter_field_collection_separator':
      $entity_type = entity_get_info('field_collection_item');
      if (!empty($entity_type['view modes'][$settings['view_mode']]['label'])) {
        $output[] =  t('View mode: @mode', array('@mode' => $entity_type['view modes'][$settings['view_mode']]['label']));
      }
      $output[] = t('Separator: "%separator"', array('%separator' => $settings['separator']));

      $summary = implode('<br>', $output);
      break;

    case 'gsb_field_formatter_path_term_separator':
      $output[] = t('Separator: "%separator"', array('%separator' => $settings['separator']));
      $output[] = t('Link to term: "%link_to_term"', array('%link_to_term' => $settings['link_to_term']  ? t('Yes') : t('No')));
      $output[] = t('Path: %path', array('%path' => $settings['path_prefix'] . '$term->' . $settings['tid_or_name']));
      $output[] = t('Depth limited: %limit', array('%limit' => $settings['limit_depth'] ? t('Yes') : t('No')));

      $summary = implode('<br>', $output);
      break;
    case 'gsb_field_formatter_image':
      $summary = array();

      $image_styles = image_style_options(FALSE);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      // Styles could be lost because of enabled/disabled modules that defines
      // their styles in code.
      if (isset($image_styles[$settings['image_style']])) {
        $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
      }
      else {
        $summary[] = t('Original image');
      }

      $link_types = array(
        'content' => t('Linked to content'),
        'file' => t('Linked to file'),
      );
      // Display this setting only if image is linked.
      if (isset($link_types[$settings['image_link']])) {
        $summary[] = $link_types[$settings['image_link']];
      }

      $summary = implode('<br />', $summary);
      break;
    case 'gsb_field_formatter_related_items_field_collection':
      // Inherit form from field_collection_fields formatter.
      $instance['display'][$view_mode]['type'] = 'field_collection_fields';
      $summary = field_collection_field_formatter_settings_summary($field, $instance, $view_mode);
      break;
  }

  return $summary;
}

/**
 * Implements hook_preprocess_HOOK() for file_entity.tpl.php.
 */
function gsb_field_formatter_preprocess_file_entity(&$variables) {
  // Add a class denoting the file view mode.
  $variables['classes_array'][] = 'file-' . $variables['type'] . '--' . $variables['view_mode'];
}

/**
 * Implements hook_field_group_formatter_info().
 */
function gsb_field_formatter_field_group_formatter_info() {
  return array(
    'display' => array(
      'gsb_field_formatter_group_comma_separator' => array(
        'label' => t('Comma separated'),
        'description' => t('Separate each field by a comma'),
        'format_types' => array('open'),
        'instance_settings' => array('show_label' => 1, 'label_element' => 'h3', 'classes' => ''),
        'default_formatter' => 'open',
      ),
      'gsb_field_formatter_group_link_to_field' => array(
        'label' => t('Link to field'),
        'description' => t('Link the group based on the value of another field'),
        'format_types' => array('open'),
        'instance_settings' => array('field_name' => ''),
        'default_formatter' => 'open',
      ),
    ),
  );
}

/**
 * Implements hook_field_group_format_settings().
 */
function gsb_field_formatter_field_group_format_settings($group) {
  $form = array();
  switch ($group->format_type) {
    case 'gsb_field_formatter_group_link_to_field':
      // Find all link fields.
      $fields = array_filter(field_info_field_map(), function ($field_info) {
        return $field_info['type'] == 'link_field';
      });
      // Find all instances that match the link fields.
      $instances = array_intersect_key(field_info_instances($group->entity_type, $group->bundle), $fields);
      // Retrieve the labels from the instances.
      $options = array_map(function ($instance) {
        return $instance['label'];
      }, $instances);

      $form['instance_settings']['field_name'] = array(
        '#type' => 'select',
        '#title' => t('Field name'),
        '#options' => $options,
        '#default_value' => !empty($group->format_settings['instance_settings']['field_name']) ? $group->format_settings['instance_settings']['field_name'] : '',
      );
      break;
    case 'gsb_field_formatter_group_comma_separator':
      $form['instance_settings']['item_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of items to show'),
        '#description' => t('Use 0 to show all items'),
        '#default_value' => !empty($group->format_settings['instance_settings']['item_count']) ? $group->format_settings['instance_settings']['item_count'] : 0,
      );
      break;
  }
  return $form;
}

/**
 * #pre_render for gsb_field_formatter_group_link_to_field.
 */
function field_group_pre_render_gsb_field_formatter_group_link_to_field(&$element, $group, &$form) {
  if (isset($group->format_settings['instance_settings']['field_name']) && (isset($form['#'. $group->entity_type]) || isset($form['#entity']))) {
    $entity = null;
    if (isset($form['#entity'])) {
      $entity = $form['#entity'];
    }
    else if (isset($form['#'. $group->entity_type])) {
      $entity = $form['#'. $group->entity_type];
    }
    $wrapper = entity_metadata_wrapper($group->entity_type, $entity);
    $field_name = $group->format_settings['instance_settings']['field_name'];
    try {
      $wrapper_field = $wrapper->{$field_name};
      $element['#prefix'] = '<div class="' . str_replace('_', '-', $group->group_name) . '">';
      $element['#prefix'] .= '<a href="' . $wrapper_field->url->value() . '"' . drupal_attributes($wrapper_field->attributes->value()) . '>';
      $element['#suffix'] = '</a></div>';
      return;
    }
    catch (EntityMetadataWrapperException $e) {
      // Use the fallback below.
    }
  }

  field_group_pre_render_div($element, $group, $form);
}

/**
 * #pre_render for gsb_field_formatter_group_comma_separator.
 */
function field_group_pre_render_gsb_field_formatter_group_comma_separator(&$element, $group, &$form) {
  // Sort and count all fields in this group.
  $element = array_filter($element);
  $children = element_children($element, TRUE);
  $end = count($children) - 1;
  // Determine the number of items to show. If 0, do not filter.
  $item_count = !empty($group->format_settings['instance_settings']['item_count']) ? $group->format_settings['instance_settings']['item_count'] : 0;
  $filter = $item_count != 0;
  foreach ($children as $delta => $key) {
    if ($filter) {
      // Count the number of items in this element.
      $terms = element_children($element[$key]);
      // Calculate which items to keep.
      $slice = array_slice($terms, 0, $item_count);
      // Decrement the number of items left, with 0 as the lowest.
      $item_count -= count($terms);
      $item_count = max(0, $item_count);
      // Remove all of the extraneous items.
      foreach (array_diff_key($terms, $slice) as $index) {
        unset($element[$key][$index]);
      }
      // Find the last kept item, and remove the trailing comma.
      // See 'gsb_field_formatter_path_term_separator'.
      $index = array_pop($slice);
      if ($index !== NULL) {
        unset($element[$key][$index]['#suffix']);
      }
      // If no other items are needed, do not add any extra commas.
      if ($item_count == 0) {
        continue;
      }
    }
    // Skip the last item.
    if ($delta != $end) {
      // Ensure that there is a suffix first.
      if (!isset($element[$key]['#suffix'])) {
        $element[$key]['#suffix'] = '';
      }
      // Add a comma separator.
      $element[$key]['#suffix'] .= '<span class="separator">, </span>';
    }
  }
  field_group_pre_render_div($element, $group, $form);
}

/**
 * Implements hook_field_collection_is_empty_alter().
 *
 * Override default is_empty handling of field_collection in order to get rid
 * of empty containers.
 */
function gsb_field_formatter_field_collection_is_empty_alter(&$is_empty, $item) {
  $wrapper = entity_metadata_wrapper('field_collection_item', $item);
  if ($wrapper->field_name->value() == 'field_person_fac_other') {
    switch ($wrapper->field_person_fac_or_other->value()) {
      // Check if any of first_name or last_name are set for Other type.
      case 'Other':
        if (is_null($wrapper->field_first_name->value()) && is_null($wrapper->field_last_name->value())) {
          $is_empty = TRUE;
        }
        break;
      // Check if Entity reference is selected when UseEntityReference type.
      case 'UseEntityReference':
        if (is_null($wrapper->field_person_fac_single_ref->value())) {
          $is_empty = TRUE;
        }
        break;
      }
  }
}

/**
 * Get the video id from the video url.
 */
function _gsb_field_formatter_get_video_id($video_url) {
  $video_parts = drupal_parse_url($video_url);
  $video_id = '';
  if (!empty($video_parts['query']['v'])) {
    $video_id = $video_parts['query']['v'];
  }
  else if (strpos($video_parts['path'], 'youtu.be')) {
    $pos = strpos($video_parts['path'], 'youtu.be');
    $video_id = substr($video_parts['path'], $pos + strlen('youtu.be') + 1);
  }
  return $video_id;
}


function gsb_field_formatter_fancybox_settings_alter(&$options, &$helpers, $context) {
  $helpers['media'] = true;
  $options['youtube'] = array('autoplay' => 1, 'start' => 0);
}

