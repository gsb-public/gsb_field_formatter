<?php

/**
 * @file
 * Provides field formatters for the GSB.
 */

/**
 * Implements hook_field_formatter_info().
 */
function gsb_field_formatter_field_formatter_info() {
  return array(
    'gsb_field_formatter_responsive_video' => array(
      'label' => t('GSB Responsive Video'),
      'field types' => array('file'),
      'settings' => array(
        'file_view_mode' => 'default',
        'preview_view_mode' => 'preview',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gsb_field_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'gsb_field_formatter_responsive_video':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $main_element = file_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
      foreach ($main_element as $delta => $item) {
        $element[$delta]['main'] = $item;
      }

      // Find all videos.
      $video_items = array();
      foreach ($items as $delta => $item) {
        if ($item['type'] == 'video') {
          $video_items[$delta] = $item;
        }
      }
      if ($video_items) {
        // Add a preview image for each video.
        $display['settings']['file_view_mode'] = 'preview';
        $video_element = file_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $video_items, $display);
        foreach ($video_element as $delta => $item) {
          $element[$delta]['preview'] = $item;
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function gsb_field_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();

  $display = &$instance['display'][$view_mode];
  switch ($display['type']) {
    case 'gsb_field_formatter_responsive_video':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $element = file_entity_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      // Add a form element for preview view mode.
      $element['preview_view_mode'] = array(
        '#title' => t('Preview view mode'),
        '#type' => 'select',
        '#options' => file_entity_view_mode_labels(),
        '#default_value' => $display['settings']['preview_view_mode'],
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gsb_field_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = '';

  $display = &$instance['display'][$view_mode];
  switch ($display['type']) {
    case 'gsb_field_formatter_responsive_video':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $summary = file_entity_field_formatter_settings_summary($field, $instance, $view_mode);
      $view_mode_label = file_entity_view_mode_label($display['settings']['preview_view_mode'], t('Unknown'));
      $summary .= '<br>' . t('Preview view mode: %mode', array('%mode' => $view_mode_label));
  }

  return $summary;
}

/**
 * Implements hook_preprocess_HOOK() for file_entity.tpl.php.
 */
function gsb_field_formatter_preprocess_file_entity(&$variables) {
  // Add a class denoting the file view mode.
  $variables['classes_array'][] = 'file-' . $variables['type'] . '--' . $variables['view_mode'];
}
