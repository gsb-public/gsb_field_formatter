<?php

/**
 * @file
 * Provides field formatters for the GSB.
 */

/**
 * Implements hook_field_formatter_info().
 */
function gsb_field_formatter_field_formatter_info() {
  return array(
    'gsb_field_formatter_responsive_video' => array(
      'label' => t('GSB Responsive Video'),
      'field types' => array('file'),
      'settings' => array(
        'file_view_mode' => 'default',
        'preview_view_mode' => 'preview',
      ),
    ),
    'gsb_field_formatter_field_collection_separator' => array(
      'label' => t('Fields with a separator'),
      'field types' => array('field_collection'),
      'settings' =>  array(
        'view_mode' => 'full',
        'separator' => ', ',
      ),
    ),
    'gsb_field_formatter_spotlight_fid_to_image' => array(
      'label' => t('Spotlight FID to Image'),
      'field types' => array('text', 'number_integer'),
    ),
    'gsb_field_formatter_address_city_state' => array(
      'label' => t('City, State'),
      'field types' => array('addressfield'),
    ),
    'gsb_field_formatter_address_no_country' => array(
      'label' => t('Full Address (no country)'),
      'field types' => array('addressfield'),
    ),
    'gsb_field_formatter_node_title_link' => array(
      'label' => t('Node title link'),
      'field types' => array('link_field'),
    ),
    'gsb_field_formatter_path_term_separator' => array(
      'label' => t('Separated tags with custom path'),
      'field types' => array('taxonomy_term_reference'),
      'settings' =>  array(
        'separator' => ', ',
        'tid_or_name' => 'tid',
        'path_prefix' => 'taxonomy/term',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gsb_field_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'gsb_field_formatter_responsive_video':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $main_element = file_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
      foreach ($main_element as $delta => $item) {
        $element[$delta]['main'] = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'gsb-responsive-main',
            ),
          ),
          'item' => $item,
        );
      }

      // Find all videos.
      $video_items = array();
      foreach ($items as $delta => $item) {
        if ($item['type'] == 'video') {
          $video_items[$delta] = $item;
        }
      }
      if ($video_items) {
        // Add a preview image for each video.
        $display['settings']['file_view_mode'] = $display['settings']['preview_view_mode'];
        $video_element = file_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $video_items, $display);
        foreach ($video_element as $delta => $item) {
          // Transform the stream wrapper into a path.
          $path = drupal_realpath($video_items[$delta]['uri']);
          // Parse the URL into parts, in order to make it an embed URL.
          $video_parts = drupal_parse_url($path);
          $embed = str_replace('watch', 'embed', $video_parts['path']) . '/' . $video_parts['query']['v'];
          // Wrap the image in a link to trigger fancybox.
          $item['wrapper'] = array(
            '#type' => 'link',
            '#title' => drupal_render($item['file']),
            '#href' => $embed,
            '#options' => array(
              'html' => TRUE,
              'query' => array(
                'autoplay' => 1,
              ),
              'attributes' => array(
                'class' => array(
                  'fancybox',
                  'fancybox.iframe',
                ),
              ),
            ),
          );

          $element[$delta]['preview'] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array(
                'gsb-responsive-preview',
              ),
            ),
            'item' => $item,
          );
        }
      }
      break;

    case 'gsb_field_formatter_field_collection_separator':
      $view_mode = !empty($settings['view_mode']) ? $settings['view_mode'] : 'full';
      $count = count($items);
      foreach ($items as $delta => $item) {
        if ($field_collection = field_collection_field_get_entity($item)) {
          $element[$delta]['entity'] = $field_collection->view($view_mode);
          if ($delta != $count - 1) {
            $element[$delta]['#suffix'] = '<span class="separator">' . check_plain($display['settings']['separator']) . '</span>';
          }
        }
      }
      if (!empty($element)) {
        $element['#type'] = 'container';
        $element['#attributes'] = array(
          'class' => array(
            'gsb_field_formatter_field_collection_separator',
          ),
        );
      }
      break;

    case 'gsb_field_formatter_spotlight_fid_to_image':
      foreach ($items as $delta => $item) {
        if ($file = file_load($item['value'])) {
          $element[$delta] = array(
            '#theme' => 'image_formatter',
            '#item' => array(
              'uri' => $file->uri,
            ),
            '#image_style' => '270x158',
          );
        }
      }
      break;

    case 'gsb_field_formatter_address_city_state':
      $countries = _addressfield_country_options_list();
      foreach ($items as $delta => $item) {
        $address = array();
        // City.
        if (!empty($item['locality'])) {
          $address[] = $item['locality'];
        }
        // State.
        if (!empty($item['administrative_area'])) {
          $address[] = $item['administrative_area'];
        }
        $address = implode(', ', $address);
        if (!empty($item['country']) && $item['country'] != 'US' && isset($countries[$item['country']])) {
          if ($address) {
            $address .= '<br>';
          }
          $address .= $countries[$item['country']];
        }
        $element[$delta]['#markup'] = $address;
      }
      break;

    case 'gsb_field_formatter_address_no_country':
      $countries = _addressfield_country_options_list();
      foreach ($items as $delta => $item) {
        // Address line 1.
        if (!empty($item['thoroughfare'])) {
          $address['first_line'] = $item['thoroughfare'];
        }
        // Address line 2.
        if (!empty($item['premise'])) {
          $address['second_line'] = $item['premise'];
        }
        // City, State Zip
        $address['third_line'] = '';
        if (!empty($item['locality'])) {
          // City.
          $address['third_line'] .= $item['locality'];
          // If there is either a city or zip, add a comma.
          if (!empty($item['administrative_area']) || !empty($item['postal_code'])) {
            $address['third_line'] .= ',';
          }
        }
        // State.
        if (!empty($item['administrative_area'])) {
          $address['third_line'] .= ' ' . $item['administrative_area'];
        }
        // Zip.
        if (!empty($item['postal_code'])) {
          $address['third_line'] .= ' ' . $item['postal_code'];
        }
        if (!empty($item['country']) && $item['country'] != 'US' && isset($countries[$item['country']])) {
          $address['fourth_line'] = $countries[$item['country']];
        }
        // Combine all of the lines.
        $element[$delta]['#markup'] = implode('<br>', array_filter($address));
      }
      break;

    case 'gsb_field_formatter_node_title_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#prefix' => '<h5>',
          '#suffix' => '</h5>',
          '#type' => 'link',
          '#href' => $item['url'],
          '#title' => $entity->title,
          '#options' => array('attributes' => array('target' => '_blank'))
        );
      }
      break;

    case 'gsb_field_formatter_path_term_separator':
      $count = count($items);
      foreach ($items as $delta => $item) {
        $term = taxonomy_term_load($item['tid']);
        $path = $settings['path_prefix'] . '/' . str_replace(' ', '-', strtolower($term->{$settings['tid_or_name']}));
        $element[$delta]['#markup'] = l($term->name, $path);
        if ($delta != $count - 1) {
          $element[$delta]['#suffix'] = '<span class="separator">' . check_plain($settings['separator']) . '</span>';
        }
      }
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function gsb_field_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();

  $display = &$instance['display'][$view_mode];
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'gsb_field_formatter_responsive_video':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $element = file_entity_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      // Add a form element for preview view mode.
      $element['preview_view_mode'] = array(
        '#title' => t('Preview view mode'),
        '#type' => 'select',
        '#options' => file_entity_view_mode_labels(),
        '#default_value' => $settings['preview_view_mode'],
      );
      break;

    case 'gsb_field_formatter_field_collection_separator':
      $entity_type = entity_get_info('field_collection_item');
      $options = array();
      foreach ($entity_type['view modes'] as $mode => $info) {
        $options[$mode] = $info['label'];
      }

      $element['view_mode'] = array(
        '#type' => 'select',
        '#title' => t('View mode'),
        '#options' => $options,
        '#default_value' => $settings['view_mode'],
        '#description' => t('Select the view mode'),
      );

      $element['separator'] = array(
        '#type' => 'textfield',
        '#title' => t('Separator'),
        '#default_value' => $settings['separator'],
        '#description' => t('Choose a separator, include any spaces'),
      );
      break;

    case 'gsb_field_formatter_path_term_separator':
      $element['path_prefix'] = array(
        '#type' => 'textfield',
        '#title' => t('Path prefix'),
        '#default_value' => $settings['path_prefix'],
        '#description' => t('The prefix for the path, defaults to taxonomy/term'),
      );
      $element['tid_or_name'] = array(
        '#type' => 'radios',
        '#title' => t('Term ID or Term name'),
        '#options' => array(
          'tid' => t('Term ID'),
          'name' => t('Term name'),
        ),
        '#default_value' => $settings['tid_or_name'],
        '#description' => t('Which value should be appended to the path prefix'),
      );
      $element['separator'] = array(
        '#type' => 'textfield',
        '#title' => t('Separator'),
        '#default_value' => $settings['separator'],
        '#description' => t('Choose a separator, include any spaces'),
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gsb_field_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = '';

  $display = &$instance['display'][$view_mode];
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'gsb_field_formatter_responsive_video':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $summary = file_entity_field_formatter_settings_summary($field, $instance, $view_mode);
      $view_mode_label = file_entity_view_mode_label($settings['preview_view_mode'], t('Unknown'));
      $summary .= '<br>' . t('Preview view mode: %mode', array('%mode' => $view_mode_label));
      break;

    case 'gsb_field_formatter_field_collection_separator':
      $entity_type = entity_get_info('field_collection_item');
      if (!empty($entity_type['view modes'][$settings['view_mode']]['label'])) {
        $output[] =  t('View mode: @mode', array('@mode' => $entity_type['view modes'][$settings['view_mode']]['label']));
      }
      $output[] = t('Separator: "%separator"', array('%separator' => $settings['separator']));

      $summary = implode('<br>', $output);
      break;

    case 'gsb_field_formatter_path_term_separator':
      $output[] = t('Separator: "%separator"', array('%separator' => $settings['separator']));
      $output[] = t('Path: %path', array('%path' => $settings['path_prefix'] . '/$term->' . $settings['tid_or_name']));

      $summary = implode('<br>', $output);
      break;
  }

  return $summary;
}

/**
 * Implements hook_preprocess_HOOK() for file_entity.tpl.php.
 */
function gsb_field_formatter_preprocess_file_entity(&$variables) {
  // Add a class denoting the file view mode.
  $variables['classes_array'][] = 'file-' . $variables['type'] . '--' . $variables['view_mode'];
}

/**
 * Implements hook_field_group_formatter_info().
 */
function gsb_field_formatter_field_group_formatter_info() {
  return array(
    'display' => array(
      'gsb_field_formatter_group_comma_separator' => array(
        'label' => t('Comma separated'),
        'description' => t('Separate each field by a comma'),
        'format_types' => array('open'),
        'instance_settings' => array('show_label' => 1, 'label_element' => 'h3', 'classes' => ''),
        'default_formatter' => 'open',
      ),
      'gsb_field_formatter_group_link_to_field' => array(
        'label' => t('Link to field'),
        'description' => t('Link the group based on the value of another field'),
        'format_types' => array('open'),
        'instance_settings' => array('field_name' => ''),
        'default_formatter' => 'open',
      ),
    ),
  );
}

/**
 * Implements hook_field_group_format_settings().
 */
function gsb_field_formatter_field_group_format_settings($group) {
  $form = array();
  switch ($group->format_type) {
    case 'gsb_field_formatter_group_link_to_field':
      // Find all link fields.
      $fields = array_filter(field_info_field_map(), function ($field_info) {
        return $field_info['type'] == 'link_field';
      });
      // Find all instances that match the link fields.
      $instances = array_intersect_key(field_info_instances($group->entity_type, $group->bundle), $fields);
      // Retrieve the labels from the instances.
      $options = array_map(function ($instance) {
        return $instance['label'];
      }, $instances);

      $form['instance_settings']['field_name'] = array(
        '#type' => 'select',
        '#title' => t('Field name'),
        '#options' => $options,
        '#default_value' => !empty($group->format_settings['instance_settings']['field_name']) ? $group->format_settings['instance_settings']['field_name'] : '',
      );
      break;
  }
  return $form;
}

/**
 * #pre_render for gsb_field_formatter_group_link_to_field.
 */
function field_group_pre_render_gsb_field_formatter_group_link_to_field(&$element, $group, &$form) {
  if (isset($group->format_settings['instance_settings']['field_name'])) {
    $wrapper = entity_metadata_wrapper($group->entity_type, $form['#'. $group->entity_type]);
    $field_name = $group->format_settings['instance_settings']['field_name'];
    try {
      $url = $wrapper->{$field_name}->url->value();
      $element['#prefix'] = '<div class="' . $group->classes . '"><a href="' . $url . '">';
      $element['#suffix'] = '</a></div>';
      return;
    }
    catch (EntityMetadataWrapperException $e) {
      // Use the fallback below.
    }
  }

  field_group_pre_render_div($element, $group, $form);
}

/**
 * #pre_render for gsb_field_formatter_group_comma_separator.
 */
function field_group_pre_render_gsb_field_formatter_group_comma_separator(&$element, $group, &$form) {
  // Sort and count all fields in this group.
  $children = element_children($element, TRUE);
  $end = count($children) - 1;
  foreach ($children as $delta => $key) {
    // Skip the last item.
    if ($delta != $end) {
      // Ensure that there is a suffix first.
      if (!isset($element[$key]['#suffix'])) {
        $element[$key]['#suffix'] = '';
      }
      // Add a comma separator.
      $element[$key]['#suffix'] .= '<span class="separator">, </span>';
    }
  }
  field_group_pre_render_div($element, $group, $form);
}
