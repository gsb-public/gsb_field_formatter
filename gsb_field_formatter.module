<?php

/**
 * @file
 * Provides field formatters for the GSB.
 */

/**
 * Implements hook_field_formatter_info().
 */
function gsb_field_formatter_field_formatter_info() {
  return array(
    'gsb_field_formatter_download_link' => array(
      'label' => t('GSB Download Link'),
      'field types' => array('file'),
      'settings' => array(
        'file_view_mode' => 'default',
        'text' => t('Download'),
      ),
    ),       
    'gsb_field_formatter_image_or_video_popup' => array(
      'label' => t('GSB Image/Video popup'),
      'field types' => array('file'),
      'settings' => array(
        'file_view_mode' => 'default',
      ),
    ),
    'gsb_field_formatter_field_collection_separator' => array(
      'label' => t('Fields with a separator'),
      'field types' => array('field_collection'),
      'settings' =>  array(
        'view_mode' => 'full',
        'separator' => ', ',
      ),
    ),
    'gsb_field_formatter_spotlight_fid_to_image' => array(
      'label' => t('Spotlight FID to Image'),
      'field types' => array('text', 'number_integer'),
    ),
    'gsb_field_formatter_address_city_state' => array(
      'label' => t('City, State'),
      'field types' => array('addressfield'),
    ),
    'gsb_field_formatter_address_no_country' => array(
      'label' => t('Full Address (no country)'),
      'field types' => array('addressfield'),
    ),
    'gsb_field_formatter_node_title_link' => array(
      'label' => t('Node title link'),
      'field types' => array('link_field'),
    ),
    'gsb_field_formatter_path_term_separator' => array(
      'label' => t('Separated tags with custom path'),
      'field types' => array('taxonomy_term_reference'),
      'settings' =>  array(
        'separator' => ', ',
        'tid_or_name' => 'tid',
        'path_prefix' => 'taxonomy/term/',
        'limit_depth' => FALSE,
      ),
    ),
    'gsb_field_formatter_image' => array(
      'label' => t('GSB Image'),
      'description' => t('Display the image in a specific view mode'),
      'field types' => array('image'),
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),
    'gsb_field_formatter_document' => array(
      'label' => t('GSB Document'),
      'description' => t('Display the document as a link with field_title as title'),
      'field types' => array('file'),
    ),
    'gsb_field_formatter_month' => array(
      'label' => t('Convert to Month'),
      'description' => t('Turn an integer field into a date value.'),
      'field types' => array('number_integer'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gsb_field_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Track the top level terms for vocabularies if needed.
  static $top_level_terms = array();

  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'gsb_field_formatter_download_link':
      if (!empty($items[0])) {
        $file = $items[0];

        // Support token replacement.
        $file['description'] = token_replace($instance['display']['default']['settings']['text'], array($entity_type => $entity), array('clear' => 1, 'sanitize' => 0));
        $element[] = array(
          '#theme' => 'file_link',
          '#file' => (object) $file,
        );        
      }
      break;      
    case 'gsb_field_formatter_image_or_video_popup':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      if ($_GET['q'] == 'home') {
        $display['settings']['file_view_mode'] = 'gsb_slideshow_small';
      }
      foreach ($items as $delta => $item) {
        $render_element = null;
        if ($item['type'] == 'image') {
          $render_element = file_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, array($item), $display);
        }
        elseif ($item['type'] == 'video') {
          $render_element = file_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, array($item), $display);

          // Transform the stream wrapper into a path.
          $path = drupal_realpath($item['uri']);

          // Handle Youbute videos.
          if ($item['filemime'] == 'video/youtube') {
            // Parse the URL into parts, in order to make it an embed URL.
            $video_parts = drupal_parse_url($path);
            $embed = str_replace('watch', 'embed', $video_parts['path']) . '/' . $video_parts['query']['v'];
          }
          // Handle Vimeo videos.
          elseif ($item['filemime'] == 'video/vimeo') {
            $video_id = end(explode('/', $path));
            $embed = 'http://player.vimeo.com/video/' . $video_id;
          }
          // Wrap the image in a link to trigger fancybox.
          $render_element = array(
            '#type' => 'link',
            '#title' => drupal_render($render_element[$delta]['file']),
            '#href' => $embed,
            '#options' => array(
              'html' => TRUE,
              'query' => array(
                'autoplay' => 1,
              ),
              'attributes' => array(
                'class' => array(
                  'fancybox',
                  'fancybox.iframe',
                  'gsb-video-preview',
                ),
              ),
            ),
          );
        }
        if ($render_element) {
          $element[$delta] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array(
                'gsb-image-video-popup',
              ),
            ),
            'item' => $render_element,
          );
        }
      }
      break;
    case 'gsb_field_formatter_field_collection_separator':
      $view_mode = !empty($settings['view_mode']) ? $settings['view_mode'] : 'full';
      $count = count($items);
      foreach ($items as $delta => $item) {
        if ($field_collection = field_collection_field_get_entity($item)) {
          $element[$delta]['entity'] = $field_collection->view($view_mode);
          if ($delta != $count - 1) {
            $element[$delta]['#suffix'] = '<span class="separator">' . check_plain($display['settings']['separator']) . '</span>';
          }
        }
      }
      if (!empty($element)) {
        $element['#type'] = 'container';
        $element['#attributes'] = array(
          'class' => array(
            'gsb_field_formatter_field_collection_separator',
          ),
        );
      }
      break;

    case 'gsb_field_formatter_spotlight_fid_to_image':
      foreach ($items as $delta => $item) {
        if ($file = file_load($item['value'])) {
          $element[$delta] = array(
            '#theme' => 'image_formatter',
            '#item' => array(
              'uri' => $file->uri,
            ),
            '#image_style' => '270x158',
          );
        }
      }
      break;

    case 'gsb_field_formatter_address_city_state':
      $countries = _addressfield_country_options_list();
      foreach ($items as $delta => $item) {
        $address = array();
        // City.
        if (!empty($item['locality'])) {
          $address[] = $item['locality'];
        }
        // State.
        if (!empty($item['administrative_area'])) {
          $address[] = $item['administrative_area'];
        }
        if (!empty($item['country']) && $item['country'] != 'US' && isset($countries[$item['country']])) {
          $address[] = $countries[$item['country']];
        }
        $address = implode(', ', $address);
        $element[$delta]['#markup'] = $address;
      }
      break;

    case 'gsb_field_formatter_address_no_country':
      $countries = _addressfield_country_options_list();
      foreach ($items as $delta => $item) {
        // Address line 1.
        if (!empty($item['thoroughfare'])) {
          $address['first_line'] = $item['thoroughfare'];
        }
        // Address line 2.
        if (!empty($item['premise'])) {
          $address['second_line'] = $item['premise'];
        }
        // City, State Zip
        $address['third_line'] = '';
        if (!empty($item['locality'])) {
          // City.
          $address['third_line'] .= $item['locality'];
          // If there is either a city or zip, add a comma.
          if (!empty($item['administrative_area']) || !empty($item['postal_code'])) {
            $address['third_line'] .= ',';
          }
        }
        // State.
        if (!empty($item['administrative_area'])) {
          $address['third_line'] .= ' ' . $item['administrative_area'];
        }
        // Zip.
        if (!empty($item['postal_code'])) {
          $address['third_line'] .= ' ' . $item['postal_code'];
        }
        if (!empty($item['country']) && $item['country'] != 'US' && isset($countries[$item['country']])) {
          $address['fourth_line'] = $countries[$item['country']];
        }
        // Combine all of the lines.
        $element[$delta]['#markup'] = implode('<br>', array_filter($address));
      }
      break;

    case 'gsb_field_formatter_node_title_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#prefix' => '<h5>',
          '#suffix' => '</h5>',
          '#type' => 'link',
          '#href' => $item['url'],
          '#title' => $entity->title,
          '#options' => array('attributes' => array('target' => '_blank'))
        );
      }
      break;

    case 'gsb_field_formatter_path_term_separator':
      $count = count($items);
      foreach ($items as $delta => $item) {
        $term = taxonomy_term_load($item['tid']);
        // Check if the depth needs to be limited.
        if ($settings['limit_depth']) {
          // If this vocabulary has not been seen before, load the top level of
          // terms, and build an array with the tids as the keys and values.
          if (!isset($top_level_terms[$term->vid])) {
            $top_level_terms[$term->vid] = drupal_map_assoc(array_map(function ($term) {
              return $term->tid;
            }, taxonomy_get_tree($term->vid, 0, 1)));
          }
          // If this term is not in the top level, decrement the count and skip.
          if (!isset($top_level_terms[$term->vid][$term->tid])) {
            $count--;
            continue;
          }
        }
        $path = $settings['path_prefix'] . str_replace(' ', '-', strtolower($term->{$settings['tid_or_name']}));
        $element[$delta]['#markup'] = '<a href="' . base_path() . $path . '">' . check_plain($term->name) . '</a>';
        if ($delta != $count - 1) {
          $element[$delta]['#suffix'] = '<span class="separator">' . check_plain($settings['separator']) . '</span>';
        }
      }
      break;
    case 'gsb_field_formatter_image':
      // Check if the formatter involves a link.
      if ($display['settings']['image_link'] == 'content') {
        $uri = entity_uri($entity_type, $entity);
      }
      elseif ($display['settings']['image_link'] == 'file') {
        $link_file = TRUE;
      }

      foreach ($items as $delta => $item) {
        if (isset($link_file)) {
          $uri = array(
            'path' => file_create_url($item['uri']),
            'options' => array(),
          );
        }
        $replace_options = array(
          'clear' => 1,
          'sanitize' => 0,
        );

        $display['settings']['alt'] = '[file:field_file_image_alt_text]';
        $display['settings']['title'] = '[file:field_file_image_title_text]';
        $file = file_load($item['fid']);
        $item['title'] = token_replace($display['settings']['title'], array('file' => $file), $replace_options);
        $item['alt'] = token_replace($display['settings']['alt'], array('file' => $file), $replace_options);

        $element[$delta] = array(
          '#theme' => 'image_formatter',
          '#item' => $item,
          '#image_style' => $display['settings']['image_style'],
          '#path' => isset($uri) ? $uri : '',
        );
      }
      break;
    case 'gsb_field_formatter_document':
      foreach ($items as $delta => $item) {
        $file = file_load($item['fid']);
        if ($file->type == 'document') {
          $entity_wrapper = entity_metadata_wrapper("file", $file->fid);
          $title = $entity_wrapper->field_title->value();
          if ($title) {
            $file->filename = $title;
          }
          $element[$delta] = array(
            '#theme' => 'file_link',
            '#file' => $file,
          );
        }
      }
      break;
    case 'gsb_field_formatter_month':
      foreach ($items as $delta => $item) {
        $month = $item['value'];
        if ($month < 1) {
          $month = 1;
        }
        else if ($month > 12) {
          $month = 12;
        }

        $adjusted_date = mktime(0, 0, 0, $month, 10);

        $element[$delta] = array(
          '#markup' => date('F', $adjusted_date),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function gsb_field_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();

  $display = &$instance['display'][$view_mode];
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'gsb_field_formatter_download_link':
      $element['text'] = array(
        '#type' => 'textfield',
        '#title' => t('Link text'),
        '#default_value' => $settings['text'],
        '#required' => TRUE,
      );
      // Display token list.
      if (module_exists('token')) {
        $element['token_tree'] = array(
          '#theme' => 'token_tree',
          '#dialog' => TRUE,
          '#token_types' => 'all',
        );
      }
      break;
    case 'gsb_field_formatter_image_or_video_popup':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $element = file_entity_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      break;
    case 'gsb_field_formatter_field_collection_separator':
      $entity_type = entity_get_info('field_collection_item');
      $options = array();
      foreach ($entity_type['view modes'] as $mode => $info) {
        $options[$mode] = $info['label'];
      }

      $element['view_mode'] = array(
        '#type' => 'select',
        '#title' => t('View mode'),
        '#options' => $options,
        '#default_value' => $settings['view_mode'],
        '#description' => t('Select the view mode'),
      );

      $element['separator'] = array(
        '#type' => 'textfield',
        '#title' => t('Separator'),
        '#default_value' => $settings['separator'],
        '#description' => t('Choose a separator, include any spaces'),
      );
      break;

    case 'gsb_field_formatter_path_term_separator':
      $element['path_prefix'] = array(
        '#type' => 'textfield',
        '#title' => t('Path prefix'),
        '#default_value' => $settings['path_prefix'],
        '#description' => t('The prefix for the path, defaults to taxonomy/term/'),
      );
      $element['tid_or_name'] = array(
        '#type' => 'radios',
        '#title' => t('Term ID or Term name'),
        '#options' => array(
          'tid' => t('Term ID'),
          'name' => t('Term name'),
        ),
        '#default_value' => $settings['tid_or_name'],
        '#description' => t('Which value should be appended to the path prefix'),
      );
      $element['separator'] = array(
        '#type' => 'textfield',
        '#title' => t('Separator'),
        '#default_value' => $settings['separator'],
        '#description' => t('Choose a separator, include any spaces'),
      );
      $element['limit_depth'] = array(
        '#type' => 'checkbox',
        '#title' => t('Limit depth to first level'),
        '#default_value' => $settings['limit_depth'],
        '#description' => t('Whether the depth should be limited to the first level'),
      );
      break;
    case 'gsb_field_formatter_image':
      $image_styles = image_style_options(FALSE);
      $element['image_style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );

      $link_types = array(
        'content' => t('Content'),
        'file' => t('File'),
      );
      $element['image_link'] = array(
        '#title' => t('Link image to'),
        '#type' => 'select',
        '#default_value' => $settings['image_link'],
        '#empty_option' => t('Nothing'),
        '#options' => $link_types,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gsb_field_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = '';

  $display = &$instance['display'][$view_mode];
  $settings = $display['settings'];
  switch ($display['type']) {

    case 'gsb_field_formatter_download_link':
      $summary = 'Link text: ' . $settings['text'];
      break;

    case 'gsb_field_formatter_image_or_video_popup':
      // Spoof the file_rendered formatter.
      $display['type'] = 'file_rendered';
      $summary = file_entity_field_formatter_settings_summary($field, $instance, $view_mode);
      break;

    case 'gsb_field_formatter_field_collection_separator':
      $entity_type = entity_get_info('field_collection_item');
      if (!empty($entity_type['view modes'][$settings['view_mode']]['label'])) {
        $output[] =  t('View mode: @mode', array('@mode' => $entity_type['view modes'][$settings['view_mode']]['label']));
      }
      $output[] = t('Separator: "%separator"', array('%separator' => $settings['separator']));

      $summary = implode('<br>', $output);
      break;

    case 'gsb_field_formatter_path_term_separator':
      $output[] = t('Separator: "%separator"', array('%separator' => $settings['separator']));
      $output[] = t('Path: %path', array('%path' => $settings['path_prefix'] . '$term->' . $settings['tid_or_name']));
      $output[] = t('Depth limited: %limit', array('%limit' => $settings['limit_depth'] ? t('Yes') : t('No')));

      $summary = implode('<br>', $output);
      break;
    case 'gsb_field_formatter_image':
      $summary = array();

      $image_styles = image_style_options(FALSE);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      // Styles could be lost because of enabled/disabled modules that defines
      // their styles in code.
      if (isset($image_styles[$settings['image_style']])) {
        $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
      }
      else {
        $summary[] = t('Original image');
      }

      $link_types = array(
        'content' => t('Linked to content'),
        'file' => t('Linked to file'),
      );
      // Display this setting only if image is linked.
      if (isset($link_types[$settings['image_link']])) {
        $summary[] = $link_types[$settings['image_link']];
      }

      $summary = implode('<br />', $summary);
      break;
  }

  return $summary;
}

/**
 * Implements hook_preprocess_HOOK() for file_entity.tpl.php.
 */
function gsb_field_formatter_preprocess_file_entity(&$variables) {
  // Add a class denoting the file view mode.
  $variables['classes_array'][] = 'file-' . $variables['type'] . '--' . $variables['view_mode'];
}

/**
 * Implements hook_field_group_formatter_info().
 */
function gsb_field_formatter_field_group_formatter_info() {
  return array(
    'display' => array(
      'gsb_field_formatter_group_comma_separator' => array(
        'label' => t('Comma separated'),
        'description' => t('Separate each field by a comma'),
        'format_types' => array('open'),
        'instance_settings' => array('show_label' => 1, 'label_element' => 'h3', 'classes' => ''),
        'default_formatter' => 'open',
      ),
      'gsb_field_formatter_group_link_to_field' => array(
        'label' => t('Link to field'),
        'description' => t('Link the group based on the value of another field'),
        'format_types' => array('open'),
        'instance_settings' => array('field_name' => ''),
        'default_formatter' => 'open',
      ),
    ),
  );
}

/**
 * Implements hook_field_group_format_settings().
 */
function gsb_field_formatter_field_group_format_settings($group) {
  $form = array();
  switch ($group->format_type) {
    case 'gsb_field_formatter_group_link_to_field':
      // Find all link fields.
      $fields = array_filter(field_info_field_map(), function ($field_info) {
        return $field_info['type'] == 'link_field';
      });
      // Find all instances that match the link fields.
      $instances = array_intersect_key(field_info_instances($group->entity_type, $group->bundle), $fields);
      // Retrieve the labels from the instances.
      $options = array_map(function ($instance) {
        return $instance['label'];
      }, $instances);

      $form['instance_settings']['field_name'] = array(
        '#type' => 'select',
        '#title' => t('Field name'),
        '#options' => $options,
        '#default_value' => !empty($group->format_settings['instance_settings']['field_name']) ? $group->format_settings['instance_settings']['field_name'] : '',
      );
      break;
    case 'gsb_field_formatter_group_comma_separator':
      $form['instance_settings']['item_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of items to show'),
        '#description' => t('Use 0 to show all items'),
        '#default_value' => !empty($group->format_settings['instance_settings']['item_count']) ? $group->format_settings['instance_settings']['item_count'] : 0,
      );
      break;
  }
  return $form;
}

/**
 * #pre_render for gsb_field_formatter_group_link_to_field.
 */
function field_group_pre_render_gsb_field_formatter_group_link_to_field(&$element, $group, &$form) {
  if (isset($group->format_settings['instance_settings']['field_name'])) {
    $wrapper = entity_metadata_wrapper($group->entity_type, $form['#'. $group->entity_type]);
    $field_name = $group->format_settings['instance_settings']['field_name'];
    try {
      $wrapper_field = $wrapper->{$field_name};
      $element['#prefix'] = '<div class="' . $group->classes . '">';
      $element['#prefix'] .= '<a href="' . $wrapper_field->url->value() . '"' . drupal_attributes($wrapper_field->attributes->value()) . '>';
      $element['#suffix'] = '</a></div>';
      return;
    }
    catch (EntityMetadataWrapperException $e) {
      // Use the fallback below.
    }
  }

  field_group_pre_render_div($element, $group, $form);
}

/**
 * #pre_render for gsb_field_formatter_group_comma_separator.
 */
function field_group_pre_render_gsb_field_formatter_group_comma_separator(&$element, $group, &$form) {
  // Sort and count all fields in this group.
  $children = element_children($element, TRUE);
  $end = count($children) - 1;
  // Determine the number of items to show. If 0, do not filter.
  $item_count = !empty($group->format_settings['instance_settings']['item_count']) ? $group->format_settings['instance_settings']['item_count'] : 0;
  $filter = $item_count != 0;
  foreach ($children as $delta => $key) {
    if ($filter) {
      // Count the number of items in this element.
      $terms = element_children($element[$key]);
      // Calculate which items to keep.
      $slice = array_slice($terms, 0, $item_count);
      // Decrement the number of items left, with 0 as the lowest.
      $item_count -= count($terms);
      $item_count = max(0, $item_count);
      // Remove all of the extraneous items.
      foreach (array_diff_key($terms, $slice) as $index) {
        unset($element[$key][$index]);
      }
      // Find the last kept item, and remove the trailing comma.
      // See 'gsb_field_formatter_path_term_separator'.
      $index = array_pop($slice);
      if ($index !== NULL) {
        unset($element[$key][$index]['#suffix']);
      }
      // If no other items are needed, do not add any extra commas.
      if ($item_count == 0) {
        continue;
      }
    }
    // Skip the last item.
    if ($delta != $end) {
      // Ensure that there is a suffix first.
      if (!isset($element[$key]['#suffix'])) {
        $element[$key]['#suffix'] = '';
      }
      // Add a comma separator.
      $element[$key]['#suffix'] .= '<span class="separator">, </span>';
    }
  }
  field_group_pre_render_div($element, $group, $form);
}

/**
 * Implements hook_field_collection_is_empty_alter().
 *
 * Override default is_empty handling of field_collection in order to get rid
 * of empty containers.
 */
function gsb_field_formatter_field_collection_is_empty_alter(&$is_empty, $item) {
  $wrapper = entity_metadata_wrapper('field_collection_item', $item);
  if ($wrapper->field_name->value() == 'field_person_fac_other') {
    switch ($wrapper->field_person_fac_or_other->value()) {
      // Check if any of first_name or last_name are set for Other type.
      case 'Other':
        if (is_null($wrapper->field_first_name->value()) && is_null($wrapper->field_last_name->value())) {
          $is_empty = TRUE;
        }
        break;
      // Check if Entity reference is selected when UseEntityReference type.
      case 'UseEntityReference':
        if (is_null($wrapper->field_person_fac_single_ref->value())) {
          $is_empty = TRUE;
        }
        break;
      }
  }
}
